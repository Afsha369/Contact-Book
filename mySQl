# Create a database and a table for storing the contacts:
CREATE DATABASE contact_book;
USE contact_book;

CREATE TABLE contacts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    phone VARCHAR(255) NOT NULL
);

#Updating python code
# Import libraries
from tkinter import *
from tkinter import messagebox
import mysql.connector

# Establish connection to MySQL
def db_connect():
    return mysql.connector.connect(
        host="localhost",      # Replace with your MySQL host
        user="root",           # Replace with your MySQL username
        password="",           # Replace with your MySQL password
        database="contact_book"
    )

# Initialize window
root = Tk()
root.geometry('700x550')
root.config(bg='#d3f3f5')
root.title('Contact Book')
root.resizable(0, 0)

# Initialize global variables
Name = StringVar()
Number = StringVar()

# Function to fetch contacts from database
def fetch_contacts():
    conn = db_connect()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM contacts ORDER BY name")
    rows = cursor.fetchall()
    conn.close()
    return rows

# Function to add new contact to database
def AddContact():
    if Name.get() != "" and Number.get() != "":
        conn = db_connect()
        cursor = conn.cursor()
        cursor.execute("INSERT INTO contacts (name, phone) VALUES (%s, %s)", (Name.get(), Number.get()))
        conn.commit()
        conn.close()
        refresh_contact_list()
        EntryReset()
        messagebox.showinfo("Confirmation", "Successfully added new contact")
    else:
        messagebox.showerror("Error", "Please fill the information")

# Function to update existing contact in database
def UpdateDetail():
    if Name.get() and Number.get() and len(select.curselection()) != 0:
        selected_contact = select.get(select.curselection()[0])
        conn = db_connect()
        cursor = conn.cursor()
        cursor.execute("UPDATE contacts SET name = %s, phone = %s WHERE name = %s", (Name.get(), Number.get(), selected_contact))
        conn.commit()
        conn.close()
        refresh_contact_list()
        EntryReset()
        messagebox.showinfo("Confirmation", "Successfully updated contact")
    else:
        messagebox.showerror("Error", "Please fill the information or select a contact")

# Function to delete selected contact from database
def Delete_Entry():
    if len(select.curselection()) != 0:
        selected_contact = select.get(select.curselection()[0])
        result = messagebox.askyesno('Confirmation', 'Do you want to delete the selected contact?')
        if result:
            conn = db_connect()
            cursor = conn.cursor()
            cursor.execute("DELETE FROM contacts WHERE name = %s", (selected_contact,))
            conn.commit()
            conn.close()
            refresh_contact_list()
    else:
        messagebox.showerror("Error", "Please select a contact")

# Function to view selected contact
def VIEW():
    if len(select.curselection()) != 0:
        selected_contact = select.get(select.curselection()[0])
        conn = db_connect()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM contacts WHERE name = %s", (selected_contact,))
        row = cursor.fetchone()
        conn.close()
        if row:
            Name.set(row[1])
            Number.set(row[2])
    else:
        messagebox.showerror("Error", "Please select a contact")

# Function to reset entry fields
def EntryReset():
    Name.set('')
    Number.set('')

# Function to exit application
def EXIT():
    root.destroy()

# Function to refresh contact list
def refresh_contact_list():
    contacts = fetch_contacts()
    select.delete(0, END)
    for contact in contacts:
        select.insert(END, contact[1])

# Create frame for contact list
frame = Frame(root)
frame.pack(side=RIGHT)

scroll = Scrollbar(frame, orient=VERTICAL)
select = Listbox(frame, yscrollcommand=scroll.set, font=('Times new roman', 16), bg="#f0fffc", width=20, height=20, borderwidth=3, relief="groove")
scroll.config(command=select.yview)
scroll.pack(side=RIGHT, fill=Y)
select.pack(side=LEFT, fill=BOTH, expand=1)

# Define buttons, labels, and entry widgets
Label(root, text='Name', font=("Times new roman", 25, "bold"), bg='SlateGray3').place(x=30, y=20)
Entry(root, textvariable=Name, width=30).place(x=200, y=30)
Label(root, text='Contact No.', font=("Times new roman", 22, "bold"), bg='SlateGray3').place(x=30, y=70)
Entry(root, textvariable=Number, width=30).place(x=200, y=80)

Button(root, text="ADD", font='Helvetica 18 bold', bg='#e8c1c7', command=AddContact, padx=20).place(x=50, y=140)
Button(root, text="EDIT", font='Helvetica 18 bold', bg='#e8c1c7', command=UpdateDetail, padx=20).place(x=50, y=200)
Button(root, text="DELETE", font='Helvetica 18 bold', bg='#e8c1c7', command=Delete_Entry, padx=20).place(x=50, y=260)
Button(root, text="VIEW", font='Helvetica 18 bold', bg='#e8c1c7', command=VIEW).place(x=50, y=325)
Button(root, text="RESET", font='Helvetica 18 bold', bg='#e8c1c7', command=EntryReset).place(x=50, y=390)
Button(root, text="EXIT", font='Helvetica 24 bold', bg='tomato', command=EXIT).place(x=250, y=470)

# Initialize contact list from database
refresh_contact_list()

root.mainloop()

